// <auto-generated />
using System;
using GoldenBanana.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GoldenBanana.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251020143121_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.Hideout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasMTX")
                        .HasColumnType("boolean");

                    b.Property<Guid>("HideoutMapId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PoeVersion")
                        .HasColumnType("integer");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<int>("TimesDownloaded")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HideoutMapId");

                    b.HasIndex("UserId");

                    b.ToTable("Hideouts");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.HideoutChangelogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HideoutId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HideoutId");

                    b.ToTable("HideoutChangelogEntries");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.HideoutComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HideoutId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HideoutId");

                    b.HasIndex("UserId");

                    b.ToTable("HideoutComments");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.HideoutHideoutTag", b =>
                {
                    b.Property<Guid>("HideoutId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HideoutTagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("HideoutId", "HideoutTagId");

                    b.HasIndex("HideoutTagId");

                    b.ToTable("HideoutHideoutTags");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.HideoutImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HideoutId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HideoutId");

                    b.ToTable("HideoutImages");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.HideoutMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("HideoutMaps");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            Name = "Baleful Hideout"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            Name = "Trial of the Ancestors Hideout"
                        });
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.HideoutTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("HideoutTags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            Name = "Cozy"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            Name = "Spacious"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            Name = "Dark"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000004"),
                            Name = "Bright"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000005"),
                            Name = "Efficient"
                        });
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 10, 20, 14, 31, 0, 0, DateTimeKind.Utc),
                            Email = "shinjinho@poetentialhideout.com",
                            Rating = 0m,
                            Username = "shinjinho"
                        });
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.UserFavoritedHideout", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HideoutId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "HideoutId");

                    b.HasIndex("HideoutId");

                    b.ToTable("UserFavoritedHideouts");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.Hideout", b =>
                {
                    b.HasOne("GoldenBanana.Api.Infrastructure.Models.HideoutMap", "Map")
                        .WithMany()
                        .HasForeignKey("HideoutMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoldenBanana.Api.Infrastructure.Models.User", "Author")
                        .WithMany("Hideouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Map");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.HideoutChangelogEntry", b =>
                {
                    b.HasOne("GoldenBanana.Api.Infrastructure.Models.Hideout", "Hideout")
                        .WithMany()
                        .HasForeignKey("HideoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hideout");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.HideoutComment", b =>
                {
                    b.HasOne("GoldenBanana.Api.Infrastructure.Models.Hideout", "Hideout")
                        .WithMany()
                        .HasForeignKey("HideoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoldenBanana.Api.Infrastructure.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Hideout");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.HideoutHideoutTag", b =>
                {
                    b.HasOne("GoldenBanana.Api.Infrastructure.Models.Hideout", "Hideout")
                        .WithMany("Tags")
                        .HasForeignKey("HideoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoldenBanana.Api.Infrastructure.Models.HideoutTag", "Tag")
                        .WithMany()
                        .HasForeignKey("HideoutTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hideout");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.HideoutImage", b =>
                {
                    b.HasOne("GoldenBanana.Api.Infrastructure.Models.Hideout", "Hideout")
                        .WithMany("Images")
                        .HasForeignKey("HideoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hideout");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.UserFavoritedHideout", b =>
                {
                    b.HasOne("GoldenBanana.Api.Infrastructure.Models.Hideout", "Hideout")
                        .WithMany("UsersFavorited")
                        .HasForeignKey("HideoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoldenBanana.Api.Infrastructure.Models.User", "User")
                        .WithMany("FavoritedHideouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hideout");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.Hideout", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Tags");

                    b.Navigation("UsersFavorited");
                });

            modelBuilder.Entity("GoldenBanana.Api.Infrastructure.Models.User", b =>
                {
                    b.Navigation("FavoritedHideouts");

                    b.Navigation("Hideouts");
                });
#pragma warning restore 612, 618
        }
    }
}
